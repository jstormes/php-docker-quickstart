############################################################################
# This section `secrets` is for sharing secret files between the host
# and Docker containers.  Unlike volumes, secrets can be outside the
# project's directory structure and have special rules to help prevent them
# from being included in a Docker image.
#
# A common development use case is ssh keys for private git repositories.
############################################################################
#secrets:
#  ssh:
#    file: ~/.ssh
#  aws:
#    file: ~/.aws


############################################################################
# This section `services` is where the "servers" are.  Each service provides
# a "server".  Common development use cases are web servers, database
# servers and testing servers.
#
# The purpose of each service is to define how the service (aka server)
# interacts with the host.
############################################################################
services:

  ##########################################################################
  # This section defines the PHP development server.
  ##########################################################################
  php-dev:
    # Name the container for easy access now you can access the container
    # by name `docker exec -it dev-server bash`.  You may need to change this
    # name if you have a conflict in container names on you system.
    #    container_name: dev-server

    # This section tells Docker to build a new container using the
    # setup specified in the given dockerfile.
    build:
      context: .
      dockerfile: .docker/php.development.dockerfiles/php8.dev.dockerfile

    # This section sets the environment variables inside the Docker container.
    environment:
      - TZ=America/Chicago # see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones

      # Database connection string for the application.
      # See the "mariadb:" section below for the database setup.
      - MYSQL_DSN=mysql:host=mariadb;dbname=app;port=3306;charset=utf8mb4;collation=utf8mb4_unicode_ci;user=root;password=password

    # The `ports` tells Docker to map port 80 from inside the container to
    # port 8088 outside the container aka port 8088 on the host, aka your laptop.
    # In this case, you can "open" this server by pointing a browser on the
    # host to http://localhost:8088.
    # {host port}:{container port}
    ports:
      - "8088:80"

    # `volumes` tells Docker to map folders and files from the host to
    # inside the Docker container.
    # NOTE: The host folder/file MUST be inside the project directory.
    # {host folder}:{container folder}
    volumes:
      - ./app:/app
      - ./:/project
      - ./.docker/xdebug.info:/xdebug.info  # see https://xdebug.org/docs/profiler

    # This section `command` overrides the default command from the docker image.
    # We are using this to force Docker to start our own command when the container
    # starts.  We can further override some environment variables only for this command.
    #
    # This command starts a PHP server on port 80 using our mapped folder `/app/html`.
    #
    command: bash -c 'php -S 0.0.0.0:80 -t /app/html'
    #
    # The export in the command: line overrides the xdebug.ini and any environment variables previously set.
    # XDEBUG_MODE, this will override the XDebug settings for the container.
    # off - Nothing is enabled. XDebug does no work besides checking whether functionality is enabled. Use this setting if you want close to 0 overhead.
    # develop - Enables Development Aids including the overloaded var_dump().
    # coverage - Enables Code Coverage Analysis to generate code coverage reports, mainly in combination with PhpUnit.
    # debug - Enables Step Debugging. This can be used to step through your code while it is running, and analyze values of variables.
    # gcstats - Enables Garbage Collection Statistics to collect statistics about PHP's Garbage Collection Mechanism.
    # profile - Enables Profiling, with which you can analyze performance bottlenecks with tools like KCacheGrind.
    # trace - Enables the Function Trace feature, which allows you to record every function call, including arguments, variable assignment, and return value that is made during a request to a file.
    # XDEBUG_CONFIG="remote_enable=on" is for PHP 5.x and <7.1.  XDEBUG_MODE is for PHP >7.1 and 8.x.
#    command: bash -c 'export XDEBUG_MODE=debug,develop,gcstats,profile,trace XDEBUG_CONFIG="remote_enable=on" XDEBUG_SESSION=PHPSTORM; php -S 0.0.0.0:80 -t /app/html'
#    command: bash -c 'export XDEBUG_MODE=debug,develop,gcstats,profile,trace; php -S 0.0.0.0:80 -t /app/html'

    # The `extra_hosts` lets us create DNS hostnames inside our container.
    # internal:host-gateway will map back to the host system.  This is used
    # so that XDebug can find the IDE for breakpoints.
    #
    # If you look inside the xdebug.ini file(s) you will see references to this
    # hostname (host.docker.internal).
    extra_hosts:
      - "host.docker.internal:host-gateway"

    # The `secrets` allows folders and files specified in the `secrets` at the top of this
    # file to be mapped inside the container.  To use git and composer in the container,
    # you will need to map your ssh key.
#    secrets:
#      - source: ssh
#        target: /home/user/.ssh
#        uid: "1000"
#        gid: "1000"
#        mode: 0700
#
#      - source: aws
#        target: /home/user/.aws
#        uid: "1000"
#        gid: "1000"
#        mode: 0700


  ##########################################################################
  # This section defines a "production" server.
  #
  # This server lets us test without XDebug, and with a dockerfile that
  # can be setup just like the production server.  This lets us check that
  # the dockerfile for production includes all the dependencies that are
  # necessary.
  #
  # This server also lets us test server performance without the overhead
  # of the development environment.  The typical use case enables caching,
  # removes any debug dependencies and enables opcode caching.
  #
  # This server can be used to test the production server setup before
  # deploying to production.
  ##########################################################################
  php-prod:
    build:
      context: .
#      ssh:
#        - default
      dockerfile: .docker/php.production.dockerfiles/php8.prod.dockerfile
  # `docker compose push php-prod` will push the image to the repository.
#    image: localhost:5000/yourimage  ## goes to local registry
#    image: your-dockerid/yourimage  ## goes to your repository on Docker Hub
    environment:
      - TZ=America/Chicago
      - MYSQL_DSN=mysql:host=mariadb;dbname=app;port=3306;charset=utf8mb4;collation=utf8mb4_unicode_ci;user=root;password=password
    ports:
      - "9088:80"

  ##########################################################################
  # This section defines a Maria DB server and a PhpMyAdmin server for the
  # development environment.
  ##########################################################################
  mariadb:
    image: mariadb
    environment:
      - TZ=America/Chicago # see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
      - MYSQL_ROOT_PASSWORD=password
      - collation-server=utf8mb4_unicode_ci
      - character-set-server=utf8mb4
      - MYSQL_DATABASE=app
    ports:
      - "5000:3306"
    volumes:
      - ./.docker/db-startup.development:/docker-entrypoint-initdb.d
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      - TZ=America/Chicago
      - PMA_USER=root
      - PMA_PASSWORD=password
      - PMA_HOSTS=mariadb
    ports:
      - "7088:80"